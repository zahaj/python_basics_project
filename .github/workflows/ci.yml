name: Run Python Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Build and run Docker Compose services
        # We pass an environment variable to the 'docker compose' command.
        # This will override the POSTGRES_DB value in docker-compose.yml
        # for this specific run, causing it to create the test database.
        env:
          POSTGRES_USER: briefing_user
          POSTGRES_PASSWORD: a_secure_password
          POSTGRES_DB: briefing_db_test   # override for CI
          DB_HOST: db
        run: docker compose up --build -d

      - name: Wait for API to be healthy
        run: |
          # Wait for up to 30 seconds for the API to respond
          timeout 30s bash -c 'until curl -s http://localhost:8000/docs > /dev/null; do echo "Waiting for API server..."; sleep 2; done'

      - name: Set up Python for test runner
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install test dependencies
        run: pip install -e ".[test]"

      - name: Run tests
        # The tests run on the host runner, connecting to the services
        # exposed by Docker Compose on localhost.
        # The tests in conftest.py are hardcoded to connect to the
        # 'briefing_db_test' database, which was just created.
        env:  # same env vars for tests
          POSTGRES_USER: briefing_user
          POSTGRES_PASSWORD: a_secure_password
          POSTGRES_DB: briefing_db_test
          DB_HOST: localhost
          DB_PORT: 5432
        run: pytest

      - name: Show container logs on failure
        if: failure()
        run: docker compose logs